--- INIT ---
function init()
    print("\n--- INIT recipeManager ---")
    os.loadAPI("lib/objectJSON")
    if not fs.exists("recipes") then
        objectJSON.encodeAndSavePretty("recipes", {})
    end
	print("recipeManager loaded\n")
end

--- UTILS ---
local function getPedestalItem(pedestal)
    return pedestal.getStackInSlot(1)
end

local function getAltarItems(pedestals)
    local items = {}
    local item
    for _,p in pairs(pedestals) do
        item = getPedestalItem(p)
        if item ~= nil then
            items[#items+1] = item
        end
    end
    return items
end

local function getRecipes()
    local recipes = objectJSON.decodeFromFile("recipes")
    if recipes == nil then
        error("\nFailed to get recipes.")
    end
    return recipes
end

local function isRecipePresent(centerItem)
    local recipes = getRecipes()
    for _,r in pairs(recipes) do
        if r["centerItem"].id == centerItem.id then
            return true
        end
    end
    return false
end

local function isIdentical(tab1, tab2)
    for _,v1 in pairs(tab1) do
        local matching = false
        for _,v2 in pairs(tab2) do
            if v1 == v2 then
                matching = true
            end
        end
        if matching == false then
            return false
        end
    end

    for _,v1 in pairs(tab2) do
        local matching = false
        for _,v2 in pairs(tab1) do
            if v1 == v2 then
                matching = true
            end
        end
        if matching == false then
            return false
        end
    end

    return true
end

function getMatchingRecipe(inputItems)
    local inputItemsID = {}
    for _,item in pairs(inputItems) do
        inputItemsID[#inputItemsID+1] = item.id
    end

    local recipes = getRecipes()
    for _,r in pairs(recipes) do
        local itemsID = {}
        for _,item in pairs(r.inputItems) do
            itemsID[#itemsID+1] = item.id
        end
        if isIdentical(inputItemsID, itemsID) then
            return r
        end
    end
    return nil
end

--- FUNCTIONS ---
function saveRecipe(pedestals, centerPedestal)
    local inputItems = getAltarItems(pedestals)
    local centerItem = getPedestalItem(centerPedestal)
    if inputItems == nil or next(inputItems) == {} or centerItem == nil then
        print("\nFailed to add recipe.")
        return
    end
    -- case recipe already exists
    if isRecipePresent(centerItem) then
        print("\nRecipe already existing, do you want to remove it and re-make it ? (yes/no)")
        if io.read():lower() ~= "yes" then
            print("\nRecipe not edited or deleted.")
            return
        end
    end

    local timeout = 0
    local outputItem = getPedestalItem(centerPedestal)
    while outputItem == nil or outputItem.id == centerItem.id  do
        if timeout >= 3 then
            print("\nAdding recipe cancelled by user.")
            return
        end
        if outputItem == nil then
            timeout = timeout + 1
        else
            timeout = 0
        end
        sleep(1)
        outputItem = getPedestalItem(centerPedestal)
    end    

    local recipes = getRecipes()

    local newItem = {}
    newItem["inputItems"] = inputItems
    newItem["centerItem"] = centerItem
    newItem["outputItem"] = outputItem
    recipes[#recipes + 1] = newItem

    objectJSON.encodeAndSavePretty("recipes", recipes)
    print("\nSuccessfully added recipe.")
end