--- INIT ---
function init()
    print("\n--- INIT recipeManager ---")
    os.loadAPI("lib/objectJSON")
    os.loadAPI("lib/inventory")
    if not fs.exists("recipes") then
        objectJSON.encodeAndSavePretty("recipes", {})
    end
	print("recipeManager loaded\n")
end

--- UTILS ---
local function getPedestalItem(pedestal)
    return pedestal.getStackInSlot(1)
end

local function getAltarItems(pedestals)
    local items = {}
    local item
    for _,p in pairs(pedestals) do
        item = getPedestalItem(p)
        if item ~= nil then
            items[#items+1] = item
        end
    end
    return items
end

function getRecipes()
    local recipes = objectJSON.decodeFromFile("recipes")
    if recipes == nil then
        error("\nFailed to get recipes.")
    end
    return recipes
end

-- return true if two items are identical (match only dmg, id, number of items... but ignoring ore dictionnary, effects...)
function isItemIdentical(item1, item2, ignoreQty)
    for k,v in pairs(item1) do
        if ignoreQty or k ~= "qty" then
            if type(v) == "table" then
                if item2[k] == nil then
                    return false
                end
                if not isItemIdentical(item2[k], v, ignoreQty) then
                    return false
                end
            end
            if v ~= item2[k] then
                return false
            end
        end
    end
    for k,v in pairs(item2) do
        if type(v) == "table" then
            if item1[k] == nil then
                return false
            end
            if not isItemIdentical(item1[k], v, ignoreQty) then
                return false
            end
        end
        if ignoreQty or k ~= "qty" then
            if v ~= item1[k] then
                return false
            end
        end
    end
    return true
end

local function isItemInList(item1, itemList, ignoreQty)
    for k,item2 in pairs(itemList) do
        if isItemIdentical(item1, item2, ignoreQty) then
            return k
        end
    end
    return false
end

local function isItemListIdentical(items1, items2, ignoreQty)
    for _,item1 in pairs(items1) do
        if not isItemInList(item1, items2, ignoreQty) then
            return false
        end
    end
    for _,item2 in pairs(items2) do
        if not isItemInList(item2, items1, ignoreQty) then
            return false
        end
    end
    return true
end

local function compactItemList(itemList)
    local newItemList = {}
    for _,item in pairs(itemList) do
        local i = isItemInList(item, newItemList, true)
        if i then
            newItemList[i]["qty"] = newItemList[i]["qty"] + 1
        else
            table.insert(newItemList, item)
        end
    end
    return newItemList
end

function compactAllRecipes()
    local newRecipes = {}
    local recipes = getRecipes()
    for k,r in pairs(recipes) do
        newRecipes[k] = r
        newRecipes[k]["inputItems"] = compactItemList(r["inputItems"])
    end
    if newRecipes == nil or next(newRecipes) == nil then
        error("Compacting recipes failed.")
    end
    objectJSON.encodeAndSavePretty("newRecipes", newRecipes)
end

function getMatchingRecipe(inputItems)
    local recipes = getRecipes()
    for _,r in pairs(recipes) do
        if inventory.isItemListIdentical(r["inputItems"], inputItems, false) then
            return r
        end
    end
    return nil
end

function getMatchingRecipeFromOutput(outputItem)
    local recipes = getRecipes()
    for _,r in pairs(recipes) do
        if inventory.isItemIdentical(r["outputItem"], outputItem, true) then
            return r
        end
    end
    return nil
end

--- FUNCTIONS ---
function saveRecipe(pedestals, centerPedestal)
    print("\nAdding recipe process begin.")
    local inputItems = getAltarItems(pedestals)
    local centerItem = getPedestalItem(centerPedestal)
    if inputItems == nil or next(inputItems) == {} or centerItem == nil then
        print("\nFailed to add recipe.")
        return
    end
    -- case recipe already exists
    local existingRecipe = getMatchingRecipe(inputItems)
    if existingRecipe ~= nil then
        print("\nRecipe already existing, do you want to remove it and re-make it ? (yes/no)")
        print(textutils.serialise(recipe.outputItem))
        if not io.read():lower() ~= "yes" then
            print("\nRecipe not edited or deleted.")
            return
        else
            print("\nRecipe will be modified.")
        end
    end

    print("Waiting the end of the infusion.")
    local timeout = 0
    local lackAspects = 0
    local aspects = {}
    local newAspects
    local outputItem = getPedestalItem(centerPedestal)
    while outputItem == nil or inventory.isItemIdentical(centerItem, outputItem, true) do
        if timeout >= 3 then
            print("\nAdding recipe cancelled by user.")
            return
        end

        timeout = (outputItem == nil) and timeout + 1 or 0
        sleep(1)
        outputItem = getPedestalItem(centerPedestal)
    end    

    local compactedInputItems = compactItemList(inputItems)
    local recipes = getRecipes()
    for _,r in pairs(recipes) do
        if inventory.isItemIdentical(r["outputItem"], outputItem) then
            if not existingRecipe ~= nil then
                -- case input items don't match any recipe but output match
                print("Recipe already exists : [" .. r.outputItem.display_name .. "]")
                print("Do you want to replace the old recipe to the new one ? (yes/no)")
                if io.read():lower() ~= "yes" then
                    print("\nRecipe not edited or deleted.")
                    return
                end
            end

            -- case recipe is modified, the user agreed to modify it
            -- (because either input or output items arlready exist in a recipe)
            r["inputItems"] = compactedInputItems
            r["centerItem"] = centerItem
            r["outputItem"] = outputItem
            objectJSON.encodeAndSavePretty("recipes", recipes)
            print("Successfully modified recipe.")
            return
        end
    end

    -- case the recipe do not already exist
    local newItem = {}
    newItem["inputItems"] = compactedInputItems
    newItem["centerItem"] = centerItem
    newItem["outputItem"] = outputItem
    table.insert(recipes, newItem)

    objectJSON.encodeAndSavePretty("recipes", recipes)
    print("Successfully added recipe.")
end

function deleteRecipe(centerPedestal)
    local recipe = nil
    print("\nDelete item from ? :\n1 - inputs\n2 - output")
    local choice = io.read()
    while recipe == nil do
        recipe = getMatchingRecipe(inputItems) and (choice == "1") or getMatchingRecipeFromOutput(outputItem)
    end
    local recipes = getRecipes()
    recipes[r] = nil
    objectJSON.encodeAndSavePretty("recipes", recipes)
    print("Successfully deleted recipe.")
end