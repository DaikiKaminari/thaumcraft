--- INIT ---
function init()
    print("\n--- INIT recipeManager ---")
    os.loadAPI("lib/objectJSON")
    if not fs.exists("recipes") then
        objectJSON.encodeAndSavePretty("recipes", {})
    end
	print("recipeManager loaded\n")
end

--- UTILS ---
local function getPedestalItem(pedestal)
    return pedestal.getStackInSlot(1)
end

local function getAltarItems(pedestals)
    local items = {}
    local item
    for _,p in pairs(pedestals) do
        item = getPedestalItem(p)
        if item ~= nil then
            items[#items+1] = item
        end
    end
    return items
end

function getRecipes()
    local recipes = objectJSON.decodeFromFile("recipes")
    if recipes == nil then
        error("\nFailed to get recipes.")
    end
    return recipes
end

-- return true if two items are identical (match only dmg, id, number of items... but ignoring ore dictionnary, effects...)
local function isItemIdentical(item1, item2)
    local matching = true
    for k,v in pairs(item1) do
        if type(v) ~= "table" and k ~= "qty" then
            if v ~= item2[k] then
                matching = false
                break
            end
        end
    end
    for k,v in pairs(item2) do
        if type(v) ~= "table" and k ~= "qty" then
            if v ~= item1[k] then
                matching = false
                break
            end
        end
    end
    return matching
end

local function isItemInList(item1, itemList)
    for _,item2 in pairs(itemList) do
        if isItemIdentical(item1, item2) then
            return true
        end
    end
    return false
end

local function isItemListIdentical(items1, items2)
    for _,item1 in pairs(items1) do
        if not isItemInList(item1, items2) then
            return false
        end
    end
    return true
end

function getMatchingRecipe(inputItems)
    local recipes = getRecipes()
    for _,r in pairs(recipes) do
        if isItemListIdentical(r["inputItems"], inputItems) then
            return r
        end
    end
    return nil
end

--- FUNCTIONS ---
function saveRecipe(pedestals, centerPedestal)
    print("\nAdding recipe process begin.")
    local inputItems = getAltarItems(pedestals)
    local centerItem = getPedestalItem(centerPedestal)
    if inputItems == nil or next(inputItems) == {} or centerItem == nil then
        print("\nFailed to add recipe.")
        return
    end
    -- case recipe already exists
    if getMatchingRecipe(inputItems) ~= nil then
        --print("\nRecipe already existing, do you want to remove it and re-make it ? (yes/no)")
        print("Recipe already existing !")
        --if io.read():lower() ~= "yes" then
        print("\nRecipe not edited or deleted.")
        return
        --end
    end

    print("Waiting the end of the infusion.")
    local timeout = 0
    local outputItem = getPedestalItem(centerPedestal)
    while outputItem == nil or (outputItem.id == centerItem.id and outputItem.dmg == centerItem.dmg) do
        if timeout >= 3 then
            print("\nAdding recipe cancelled by user.")
            return
        end
        timeout = (outputItem == nil) and timeout + 1 or 0
        sleep(1)
        outputItem = getPedestalItem(centerPedestal)
    end    

    local recipes = getRecipes()

    local newItem = {}
    newItem["inputItems"] = inputItems
    newItem["centerItem"] = centerItem
    newItem["outputItem"] = outputItem
    recipes[#recipes + 1] = newItem

    objectJSON.encodeAndSavePretty("recipes", recipes)
    print("Successfully added recipe.")
end