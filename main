--- CONFIG ---
local centerPedestalName = "container_pedestal_12"  -- center pedestal peripheral name
local chestName = "ender_chest_2"                   -- input chest peripheral name
local redstoneSide = "top"                          -- side where the redstone is checked
local centerChest = "north"                         -- direction of the input chest for center pedestal relative to the input chest
local otherChest = "south"                          -- direction of the input chest for the others pedestals relative to the input chest

--- GLOBAL VARIABLES ---
local centerPedestal    -- table : peripheral - the center pedestal
local pedestals = {}    -- table : peripherals - all pedestals
local chest             -- table : peripheral - input chest

--- INIT ---
local function periphInit()
    centerPedestal = peripheral.wrap(centerPedestalName)
    if centerPedestal == nil then
        error("Center pedestal missing or wrong config : [" .. centerPedestalName .. "]")
    end
    local i = 1
    for _,v in pairs(peripheral.getNames()) do
        if v:find("container_pedestal") ~= nil then
            pedestals[i] = peripheral.wrap(v)
            i = i + 1
        end
    end
    if #pedestals < 12 then
        error("Missing pedestals, only [" .. tostring(#pedestals) .. "] were found.")
    end
    chest = peripheral.wrap(chestName)
    if chest == nil then
        error("Chest missing or wrong config : [" .. chestName .. "].")
    end
end

-- Load apis and execute init() method if it exists
local function init(apis)
    for _,path in pairs(apis) do
        if not fs.exists(path) then
            error("API [" .. path .. "] does not exist.")
        end
        print("\nLoading API : [" .. path .. "]")
        os.loadAPI(path)
    end
    for _,path in pairs(apis) do
        local api
        for v in path:gmatch("([^/]+)") do
            api = v
        end
        if _G[api].init ~= nil then
            _G[api].init()
        end
    end
end

--- UTILS ---
local function getItems(chest)
    local inputItems = {}
    local item
    for i=1,chest.getInventorySize() do
        item = chest.getStackInSlot(i)
        if item ~= nil then
            inputItems[i] = item
        end
    end
    return inputItems
end

--- FUNCTIONS ---
-- add a new recipe
local function getRecipe()
    local inputItems = getItems(chest)
    return recipeManager.getMatchingRecipe(inputItems)
end

-- process an item in the altar
local function processItem(inputItems, recipe)
    print("\nProcess begin.")
    print("Expected output item :")
    print(recipe.outputItem.display_name)
    for i,item in pairs(inputItems) do
        if item.id == recipe.centerItem.id then
            chest.pushItem(centerChest, i)
        else
            chest.pushItem(otherChest, i)
        end
    end
    print("Wait infusion is finished")
    local centerItem = centerPedestal.getStackInSlot(1)
    while centerItem == nil or centerItem.id ~= recipe.outputItem.id do
        centerItem = centerPedestal.getStackInSlot(1)
        sleep(0)
    end
    if centerItem == nil then
        print("\nInfusion stopped by user.")
    end
    centerPedestal.pushItem("north", 1)
    print("\nSuccesfully finished infusion")
end

-- manage the altar for autocrafting
local function altarManagement()
    if next(getItems(chest)) ~= nil then
        print("\nItems detected in input chest.")
        local inputItems = getItems(chest)
        print("Searching for matching recipe :")
        local recipe = getRecipe()
        if recipe == nil then
            print("  No recipe found.")
            return
        end
        print("  Recipe found.")
        print("\nRECIPE :") -- TO REMOVE
        print(tostring(matchingRecipe)) -- TO REMOVE
        if type(matchingRecipe) == "table" then -- TO REMOVE
            print(textutils.serialise(matchingRecipe)) -- TO REMOVE
        end -- TO REMOVE
        processItem(inputItems, recipe)
    end
end

-- manage recipes
local function recipeManagement()
    if redstone.getInput(redstoneSide) then
        recipeManager.saveRecipe(pedestals, centerPedestal, redstoneSide)
    end
end

-- main call
local function main()
    init({"lib/objectJSON", "recipeManager"})
    periphInit()
    while true do
        parallel.waitForAll(altarManagement, recipeManagement)
        sleep(0)
    end
end

--main()

local function test()
    init({"lib/objectJSON", "recipeManager"})
    periphInit()
    while true do
        if next(chest.getAllStacks()) ~= nil then
            local recipe = getRecipe()
            if type(recipe) == "table" then
                print("YES")
                print(textutils.serialise(recipe))
            else
                print("NO")
                print(tostring(recipe))
            end
        else
            print("nothing")
        end
        sleep(0)
    end
end

test()